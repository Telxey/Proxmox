#!/usr/bin/env bash
set -euo pipefail

# Copyright (c) 2021-2024 Telxey
# Author: TELXEY (Rax)
# License: MIT

# Color definitions
bold=$(echo -en "\e[1m")
dim=$(echo -en "\e[2m")
reverse=$(echo -en "\e[7m")
hidden=$(echo -en "\e[8m")
normal=$(echo -en "\e[0m")
blue=$(echo -en "\e[34m")
red=$(echo -en "\e[31m")
green=$(echo -en "\e[32m")
orange=$(echo -en "\033[38;5;202m")
lightblue=$(echo -en "\e[94m")
lightyellow=$(echo -en "\033[38;5;184m")
lightpurple=$(echo -en "\033[38;5;135m")
lightaqua=$(echo -en "\e[96m")
white=$(echo -en "\e[97m")
default=$(echo -en "\e[39m")
YW=$(echo "\033[33m")
BL=$(echo "\033[36m")
RD=$(echo "\033[01;31m")
BGN=$(echo "\033[4;92m")
GN=$(echo "\033[1;92m")
DGN=$(echo "\033[32m")
CL=$(echo "\033[m")
CM="${GN}✓${CL}"
CROSS="${RD}✗${CL}"
BFR="\\r\\033[K"
HOLD="-"
underline=$(echo "\e[4m")


# Progress bar function
progress_bar() {
    local duration=$1
    local cols=$(($(tput cols) - 10))
    local progress

    for ((i=1; i<=duration; i++)); do
        progress=$((i * cols / duration))
        printf "\r[${orange}"
        for ((j=1; j<=progress; j++)); do printf "▇"; done
        for ((j=progress+1; j<=cols; j++)); do printf " "; done
        printf "${normal}] %d%%" $((i * 100 / duration))
        sleep 0.1
    done
    echo
}

# Interactive spinner
spinner() {
    local pid=$1
    local delay=0.1
    local spinstr='|, /, -, \'
    while ps a | awk '{print $1}' | grep -q "$pid"; do
        local temp=${spinstr#?}
        printf  "  [%c]  " "$spinstr"
        local spinstr=$temp${spinstr%"$temp"}
        sleep $delay
        printf "\b\b\b\b\b\b"
    done
    printf "    \b\b\b\b"
}

# Execute command with spinner
exec_with_spinner() {
    local cmd="$1"
    local msg="$2"
    msg_info "$msg"
    eval "$cmd" &>/dev/null &
    spinner $!
    if [ $? -eq 0 ]; then
        msg_ok "$msg completed"
    else
        msg_error "$msg failed"
    fi
}

# Message functions
msg_info() {
    local msg="$1"
    echo -ne " ${HOLD} ${YW}${msg}...${CL}"
}

msg_ok() {
    local msg="$1"
    echo -e "${BFR} ${CM} ${GN}${msg}${CL}"
}

msg_error() {
    local msg="$1"
    echo -e "${BFR} ${CROSS} ${RD}${msg}${CL}"
}

# Execute command with progress
exec_with_progress() {
    local cmd="$1"
    local msg="$2"
    msg_info "$msg"
    eval "$cmd" &>/dev/null &
    local pid=$!
    progress_bar 20
    wait $pid
    if [ $? -eq 0 ]; then
        msg_ok "$msg completed"
    else
        msg_error "$msg failed"
    fi
}

# Banner functions
show_banner() {
   local text="$1"
   local color="$2"
   local textcolor="${3:-$color}"  # Optional third param for text color
   local width=60
   local padding=$(( (width - ${#text}) / 2 ))
   
   echo -e "${color}${bold}"
   echo "============================================================"
   echo -ne "${color}"; printf '%*s' $padding ""
   echo -ne "${textcolor}${text}${color}"
   echo
   echo "============================================================"
   echo -e "${normal}"
}

# Usage example:
show_banner "Step 1: Stopping Ceph Services" "${blue}" "${orange}"


show_warning_banner() {
    local banner="

         ██╗    ██╗ █████╗ ██████╗ ███╗   ██╗██╗ ██████╗ 
         ██║    ██║██╔══██╗██╔══██╗████╗  ██║██║██╔════╝ 
         ██║ █╗ ██║███████║██████╔╝██╔██╗ ██║██║██║  ███╗
         ██║███╗██║██╔══██║██╔══██╗██║╚██╗██║██║██║   ██║
         ╚███╔███╔╝██║  ██║██║  ██║██║ ╚████║██║╚██████╔╝
          ╚══╝╚══╝ ╚═╝  ╚═╝╚═╝  ╚═╝╚═╝  ╚═══╝╚═╝ ╚═════╝ "

    for ((i=0; i<7; i++)); do
        clear
        echo -e "${red}${bold}${banner}${normal}"
        sleep 0.5
        clear
        sleep 0.5
    done
    
    echo -e "${red}${bold}${banner}${normal}"
    cat <<"EOF"

    ⚠️  WARNING: This will completely remove your Ceph installation
    All Ceph storage and configuration will be permanently deleted
    Please ensure you have backups before continuing
EOF
    echo "${normal}"
}


show_ceph_banner() {
    echo "${orange}"
    cat <<"EOF"
    
 ▄████▄  ▓█████ ██▓███   ▒ ████▒     ▄████▄   ██▓    ▓█████ ▄▄▄      ███▄    █  ▓█████ ██▀███  
▒██▀ ▀█  ▓█   ▀▓██░  ██ ▒▓██        ▒██▀ ▀█  ▓██▒    ▓█   ▀▒████▄    ██ ▀█   █  ▓█   ▀▓██ ▒ ██▒
▒▓█    ▄ ▒███  ▓██░ ██▓▒░▒████      ▒▓█    ▄ ▒██░    ▒███  ▒██  ▀█▄ ▓██  ▀█ ██▒ ▒███  ▓██ ░▄█ ▒
▒▓▓▄ ▄██ ▒▓█  ▄▒██▄█▓▒ ▒░░▓█▒       ▒▓▓▄ ▄██ ▒██░    ▒▓█  ▄░██▄▄▄▄██▓██▒  ▐▌██▒ ▒▓█  ▄▒██▀▀█▄  
▒ ▓███▀ ▒░▒████▒██▒ ░  ░ ░▒█░       ▒ ▓███▀ ▒░██████▒░▒████▒▓█   ▓██▒██░   ▓██░▒░▒████░██▓ ▒██▒
░ ░▒ ▒  ░░░ ▒░ ▒▓▒░ ░  ░  ▒ ░       ░ ░▒ ▒  ░░ ▒░▓  ░░░ ▒░ ░▒▒   ▓▒█░ ▒░   ▒ ▒ ░░░ ▒░ ░ ▒▓ ░▒▓░
  ░  ▒  ░ ░ ░  ░▒ ░       ░           ░  ▒  ░░ ░ ▒  ░ ░ ░  ░ ░   ▒▒ ░ ░░   ░ ▒░░ ░ ░    ░▒ ░ ▒ 
░           ░  ░░         ░ ░       ░          ░ ░      ░    ░   ▒     ░   ░ ░     ░    ░░   ░ 
░ ░     ░   ░                       ░ ░     ░    ░  ░   ░        ░           ░ ░   ░     ░     
EOF
    echo "${normal}"
}

# Check root
check_root() {
    if [[ "$(id -u)" -ne 0 || $(ps -o comm= -p $PPID) == "sudo" ]]; then
        clear
        msg_error "Please run this script as root."
        echo -e "\nExiting..."
        sleep 2
        exit
    fi
}

# Check Proxmox version
pve_check() {
    if [ $(pveversion | grep "pve-manager/8" | wc -l) -ne 1 ]; then
        whiptail --backtitle "Proxmox VE Helper Scripts" --msgbox --title "Proxmox VE 7 Detected" "You are currently using Proxmox VE 7 (EOL 2024-07), refrain from creating Debian 12 LXCs." 10 60
    fi
    if ! pveversion | grep -Eq "pve-manager/(7\.[0-9]|8\.[0-9])"; then
        msg_error "This version of Proxmox Virtual Environment is not supported"
        echo -e "Requires PVE Version 7.0 or higher"
        echo -e "Exiting..."
        sleep 2
        exit
    fi
}

# Main cleanup function
cleanup_ceph() {
    local total_steps=7
    local current_step=1

    # Stop services
    show_banner "Step 1: Stopping Ceph Services" "${lightblue}" "${orange}"
    for service in "ceph-mon" "ceph-mgr" "ceph-mds" "ceph-osd"; do
        exec_with_spinner "systemctl stop $service.target" "Stopping $service"
    done

    # Remove systemd files
    show_banner "Step 2: Removing Systemd Files" "${lightblue}" "${orange}"
    exec_with_spinner "rm -rf /etc/systemd/system/ceph*" "Removing systemd files"
    exec_with_spinner "systemctl daemon-reload" "Reloading systemd"

    # Remove libraries
    show_banner "Step 3: Removing Ceph Libraries" "${blue}" "${orange}"
    exec_with_spinner "rm -rf /var/lib/ceph/mon/ /var/lib/ceph/mgr/ /var/lib/ceph/mds/" "Removing Ceph libraries"

    # Purge packages
    show_banner "Step 4: Purging Ceph Packages" "${blue}" "${orange}"
    exec_with_spinner "pveceph purge" "Purging pveCeph"
    exec_with_spinner "DEBIAN_FRONTEND=noninteractive apt-get purge -y ceph-mon ceph-osd ceph-mgr ceph-mds ceph-base ceph-mgr-modules-core" "Purging Ceph packages"
    exec_with_spinner "DEBIAN_FRONTEND=noninteractive apt-get remove -y ceph-common ceph-fuse" "Removing Ceph components"

    # Remove configs
    show_banner "Step 5: Removing Configurations" "${blue}" "${orange}"
    exec_with_spinner "rm -rf /etc/ceph/* /etc/pve/ceph.conf /etc/pve/priv/ceph.*" "Removing configurations"

    # System cleanup
    show_banner "Step 6: System Cleanup" "${blue}" "${orange}"
    exec_with_spinner "DEBIAN_FRONTEND=noninteractive apt-get autoremove -y" "Running autoremove"
    exec_with_spinner "DEBIAN_FRONTEND=noninteractive apt-get clean" "Cleaning apt cache"
    exec_with_spinner "DEBIAN_FRONTEND=noninteractive apt-get autoclean" "Auto-cleaning packages"
    exec_with_spinner "DEBIAN_FRONTEND=noninteractive apt-get update" "Updating package lists"

    show_banner "Ceph Cleanup Complete!" "${green}"
}

# Main execution
clear
msg_info "Checking root"
sleep 5
check_root
msg_ok "Good to GO ..."
sleep 5

clear
show_warning_banner

echo "${orange}${bold}Do you wish to continue removing Ceph?"
echo "${green}For continue press 1 ${white}${bold} or ${red}For cancel press 2 ${normal}"
select yn in "Yes" "No"; do
    case $yn in
        Yes ) break;;
        No ) echo "${red}Installation canceled${normal}"; exit;;
    esac
done

clear
show_ceph_banner
echo -e "${dim}${white}Author: ${green}${bold}TELXEY${normal}\n"
echo -e "${lightyellow}Hello${green} Today is: ${lightpurple}$(date '+%a %b %-d %I:%M:%S %p %Z %Y')${normal}\n"
echo -e "${underline}\n"
echo "${normal}"

echo "${green}            Start Cleaning ${orange}Ceph"
echo "${normal}"

msg_info "Checking Proxmox Installations"
pve_check
msg_ok "Proxmox is running"
msg_info "Loading Script"
msg_ok "Script loaded"

cleanup_ceph

echo -e "\n${green}${bold}Cleanup completed successfully!${normal}"
