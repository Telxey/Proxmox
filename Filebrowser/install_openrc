#!/usr/bin/env bash

# Function to display header information
function header_info {
    clear
    cat <<"EOF"
    _______ __     ____
   / ____(_) /__  / __ )_________ _      __________  _____
  / /_  / / / _ \/ __  / ___/ __ \ | /| / / ___/ _ \/ ___/
 / __/ / / /  __/ /_/ / /  / /_/ / |/ |/ (__  )  __/ /
/_/   /_/_/\___/_____/_/   \____/|__/|__/____/\___/_/

EOF
}

# Get the first IP address from hostname
YW="\033[1;33m"
WT="\033[1;37m"
BL="\033[36m"
RD="\033[01;31m"
BGN="\033[4;92m"
GN="\033[1;92m"
DGN="\033[32m"
CL="\033[m"
BFR="\\r\\033[K"
HOLD="-"
CM="${GN}âœ“${CL}"
APP="FileBrowser"
hostname="$(hostname)"

header_info

# Check if FileBrowser is already installed
if [ -f /root/filebrowser.db ]; then
    read -r -p "Would you like to uninstall ${APP} on $hostname? <y/N> " prompt
    if [[ "${prompt,,}" =~ ^(y|yes)$ ]]; then
        # Stop and remove the service if installed
        /etc/init.d/filebrowser stop
        rc-update delete filebrowser
        rm -rf /usr/local/bin/filebrowser /root/filebrowser.db /etc/init.d/filebrowser
        echo "$APP removed"
        sleep 2
        clear
        exit
    else
        clear
        exit
    fi
fi

# Confirm with the user to proceed with installation
while true; do
    read -p "This will install ${APP} on $hostname. Proceed (y/n)? " yn
    case $yn in
    [Yy]*) break ;;
    [Nn]*) exit ;;
    *) echo "Please answer yes or no." ;;
    esac
done

header_info

# Function to display messages
function msg_info() {
    local msg="$1"
    echo -ne " ${HOLD} ${YW}${msg}..."
}

# Function to display success messages
function msg_ok() {
    local msg="$1"
    echo -e "${BFR} ${CM} ${GN}${msg}${CL}"
}

# Ask user if they want to use No Authentication
read -r -p "Would you like to use No Authentication? <y/N> " prompt

# Install FileBrowser
msg_info "Installing ${APP}"

# Install curl if not already installed
if ! command -v curl &> /dev/null; then
    echo -e "${YW}curl is required to install ${APP}. Installing curl...${CL}"
    apk add --no-cache curl &>/dev/null  # Suppress output
fi

# Download and install FileBrowser, suppress all output
{
    curl -fsSL https://raw.githubusercontent.com/filebrowser/get/master/get.sh | bash >/dev/null 2>&1
} || {
    echo -e "${RD}Error occurred during FileBrowser installation.${CL}"
}

# Configure FileBrowser based on authentication preference
if [[ "${prompt,,}" =~ ^(y|yes)$ ]]; then
    # Configure for no authentication
    filebrowser config init -a '0.0.0.0' &>/dev/null
    filebrowser config set -a '0.0.0.0' &>/dev/null
    filebrowser config init --auth.method=noauth &>/dev/null
    filebrowser config set --auth.method=noauth &>/dev/null
    filebrowser users add ID 1 --perm.admin &>/dev/null  
else
    # Configure with authentication
    filebrowser config init -a '0.0.0.0' &>/dev/null
    filebrowser config set -a '0.0.0.0' &>/dev/null
    filebrowser users add admin admin --perm.admin &>/dev/null
fi

msg_ok "Installed ${APP} on $hostname"

# Create OpenRC service
msg_info "Creating Service"

    cat <<EOF >/etc/init.d/filebrowser
#!/bin/bash

PIDFILE="/run/filebrowser.pid"
LOGFILE="/var/log/filebrowser.log"

case "\$1" in
    start)
        echo "Starting FileBrowser..."
        if [ -f "\$PIDFILE" ]; then
            echo "[Warning] FileBrowser is already running..."
            exit 1
        fi

        # Start the daemon
        /usr/local/bin/filebrowser -r / --port 8080 >> "\$LOGFILE" 2>&1 &
        echo \$! > "\$PIDFILE"
        echo "[OK] FileBrowser started..."
        ;;

    stop)
        echo "Stopping FileBrowser..."
        if [ ! -f "\$PIDFILE" ]; then
            echo "[Stop] FileBrowser is not running "
            exit 1
        fi

        # Stop the daemon
        kill "\$(cat "\$PIDFILE")"
        rm -f "\$PIDFILE"
        echo "[Stopped] FileBrowser stopped."
        ;;

    status)
        if [ -f "\$PIDFILE" ]; then
            echo "[Running] FileBrowser is running..."
        else
            echo "[Stopped] FileBrowser is stopped."
        fi
        ;;

    *)
        echo "Usage: \$0 {start|stop|status}"
        exit 1
        ;;
esac
EOF

# Ensure the service script is executable
chmod +x /etc/init.d/filebrowser


# Add the service to the default runlevel
msg_ok "Service Configurations Created"
rc-update add filebrowser default
msg_ok "Created Service"

# Suggest to start the service immediately
read -r -p "Would you like to start the ${APP} service now? <Y/n> " start_prompt
start_prompt=${start_prompt:-y}
if [[ "${start_prompt,,}" =~ ^(y|yes)$ ]]; then
    if rc-service filebrowser start; then
        msg_ok "${APP} service started."
    else
        echo -e "${RD}Failed to start ${APP} service. Please check for errors above.${CL}"
    fi
fi

# Suggest to restart the network service if needed
read -r -p "Would you like to restart the network service now? (recommended) <Y/n> " restart_network_prompt
restart_network_prompt=${restart_network_prompt:-y}
if [[ "${restart_network_prompt,,}" =~ ^(y|yes)$ ]]; then
    msg_info "Restarting network service..."
    # Running the command in the background
    (rc-service networking restart > /dev/null 2>&1 &)
    msg_ok "Network service restart initiated."
fi

# Get the first non-loopback IP address
IP=$(ip addr show | grep 'inet ' | grep -v '127.0.0.1' | awk '{print $2}' | cut -d/ -f1 | head -n1)

# Check if the IP was successfully retrieved
if [ -z "$IP" ]; then
    echo -e "${RD}Error: Unable to fetch a non-loopback IP address.${CL}"
    exit 1
fi

## Get the first non-loopback IP address
IP=$(ip addr show | grep 'inet ' | grep -v '127.0.0.1' | awk '{print $2}' | cut -d/ -f1 | head -n1)

# Check if the IP was successfully retrieved
if [ -z "$IP" ]; then
    echo -e "${RD}Error: Unable to fetch a non-loopback IP address.${CL}"
    exit 1
fi

echo -e "${GN} - All operations completed successfully! You can now access ${APP} at ${WT}$IP${RD}:8080${CL}"

echo -e ${YW}Default Login Credentials:${CL}
echo -e ${BL} - Username: ${GN}admin${CL}
echo -e ${BL} - Password: ${GN}admin${CL}

echo -e ${YW}Use the following commands to manage the FileBrowser service:${CL}
echo -e ${BL} - To start the service:     ${WT} rc-service filebrowser start${CL}
echo -e ${BL} - To stop the service:      ${WT} rc-service filebrowser stop${CL}
echo -e ${BL} - To status the service:    ${WT} rc-service filebrowser status${CL}
exit


