#!/bin/bash

# ANSI color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
MAGENTA='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Ceph version
ceph_version="19.2.0-pve2"

# Function to prompt for user input
prompt() {
    echo -e "${CYAN}$1: ${NC}" >&2
    read -p "" input
    echo "$input"
}

# Function to generate a random FSID
generate_fsid() {
    echo "$(uuidgen)"
}

# Function to validate IP address
validate_ip() {
    if [[ $1 =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]] || [[ $1 =~ ^[a-fA-F0-9:]+$ ]]; then
        return 0
    else
        return 1
    fi
}

# Function to validate network CIDR
validate_cidr() {
    if [[ $1 =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+/[0-9]+$ ]] || [[ $1 =~ ^[a-fA-F0-9:]+/[0-9]+$ ]]; then
        return 0
    else
        return 1
    fi
}

# Function to add Ceph repository
add_ceph_repo() {
    local host=$1
    echo -e "${YELLOW}Adding Ceph repository on $host...${NC}"
    ssh "$host" "cat <<EOF | tee /etc/apt/sources.list.d/ceph.list > /dev/null
deb [arch=arm64] https://mirrors.apqa.cn/proxmox/debian/pve bookworm ceph-squid
EOF"
}

# Function to install Ceph packages
install_ceph_packages() {
    local host=$1
    echo -e "${YELLOW}Installing Ceph packages on $host...${NC}"
    ssh "$host" "apt update && apt install -y --reinstall \
        ceph=$ceph_version \
        ceph-common=$ceph_version \
        ceph-base=$ceph_version \
        ceph-mgr=$ceph_version \
        ceph-mds=$ceph_version \
        ceph-osd=$ceph_version \
        ceph-volume=$ceph_version \
        ceph-mon=$ceph_version \
        ceph-mgr-dashboard=$ceph_version \
        radosgw \
        python3-pip \
        python3-wheel \
        python3-cryptography \
        python3-jwt \
        python3-openssl \
        python3-cherrypy3 \
        python3-bcrypt \
        python3-werkzeug \
        python3-requests \
        python3-routes"
    ssh "$host" "echo 'PYTHON_PATH=\"/usr/lib/python3/dist-packages\"' >> /etc/default/ceph"
    ssh "$host" "chown -R ceph:ceph /usr/share/ceph/mgr/"
}

# Function to create and distribute admin keyring
create_admin_keyring() {
    local nodes=("$@")

    echo -e "${YELLOW}Creating admin keyring...${NC}"
    ceph auth get client.admin -o /etc/ceph/ceph.client.admin.keyring
    chown ceph:ceph /etc/ceph/ceph.client.admin.keyring
    chmod 600 /etc/ceph/ceph.client.admin.keyring

    echo -e "${YELLOW}Linking admin keyring to Proxmox location...${NC}"
    cp /etc/ceph/ceph.client.admin.keyring /etc/pve/priv/ceph.client.admin.keyring

    echo -e "${YELLOW}Distributing admin keyring to nodes...${NC}"
    for node in "${nodes[@]}"; do
        scp /etc/ceph/ceph.client.admin.keyring "$node:/etc/ceph/ceph.client.admin.keyring"
        ssh "$node" "chown ceph:ceph /etc/ceph/ceph.client.admin.keyring"
        ssh "$node" "chmod 600 /etc/ceph/ceph.client.admin.keyring"
    done
}

# Function to create and distribute bootstrap keyring
create_bootstrap_keyring() {
    local nodes=("$@")

    echo -e "${YELLOW}Creating bootstrap-osd keyring...${NC}"
    ceph-authtool --create-keyring /etc/pve/priv/ceph.client.bootstrap-osd.keyring --gen-key -n client.bootstrap-osd --cap mon 'allow profile bootstrap-osd'

    echo -e "${YELLOW}Distributing bootstrap-osd keyring to nodes...${NC}"
    for node in "${nodes[@]}"; do
        scp /etc/pve/priv/ceph.client.bootstrap-osd.keyring "$node:/etc/pve/priv/ceph.client.bootstrap-osd.keyring"
        ssh "$node" "chown ceph:ceph /etc/pve/priv/ceph.client.bootstrap-osd.keyring"
    done
}

# Function to initialize the Ceph cluster
initialize_ceph_cluster() {
    local nodes=("$@")
    local fsid=$1
    local mon_hosts=$2

    echo -e "${YELLOW}Initializing Ceph cluster...${NC}"
    cephadm bootstrap --mon-ip "$mon_hosts" --fsid "$fsid"

    echo -e "${YELLOW}Waiting for the cluster to start...${NC}"
    sleep 10
    ceph -s
}

# Function to create OSDs
create_osds() {
    local nodes=("$@")

    for node in "${nodes[@]}"; do
        echo -e "${YELLOW}Setting up OSD on $node...${NC}"

        # List available disks
        echo -e "${CYAN}Available disks on $node:${NC}"
        ssh "$node" "lsblk -d -o NAME,SIZE,MODEL"

        # Prompt for disk selection
        disk=$(prompt "Enter the disk to use for OSD (e.g., sdb, nvme0n1):")
        if [[ $disk != /dev/* ]]; then
            disk="/dev/$disk"
        fi

        # Validate disk exists
        if ! ssh "$node" "lsblk $disk" &> /dev/null; then
            echo -e "${RED}Disk $disk does not exist on $node. Skipping...${NC}"
            continue
        fi

        # Prompt for disk type (SSD, HDD, NVMe)
        disk_type=$(prompt "Enter disk type (ssd, hdd, nvme):")

        # Create OSD with the selected disk and tag
        echo -e "${YELLOW}Creating OSD on $node with disk $disk (type: $disk_type)...${NC}"
        ssh "$node" "ceph-volume lvm create --data $disk"

        # Tag the OSD with the disk type
        osd_id=$(ssh "$node" "ceph-volume lvm list --format=json" | jq -r '.[] | select(.devices[] == "'$disk'") | .tags["ceph.osd_id"]')
        if [[ -n $osd_id ]]; then
            echo -e "${GREEN}Tagging OSD $osd_id as $disk_type...${NC}"
            ceph osd crush set-device-class "$disk_type" "$osd_id"
        else
            echo -e "${RED}Failed to find OSD ID for disk $disk on $node.${NC}"
        fi
    done

    # Verify OSDs are up
    echo -e "${YELLOW}Waiting for OSDs to come up...${NC}"
    sleep 10
    ceph osd status
}

# Function to configure RGW
configure_rgw() {
    local nodes=("$@")

    # Create RGW pool
    echo -e "${YELLOW}Creating RGW pool...${NC}"
    ceph osd pool create rgw.data 32 32
    ceph osd pool application enable rgw.data rgw

    # Generate RGW keys
    RGW_access_key=$(openssl rand -hex 16)
    RGW_secret_key=$(openssl rand -hex 32)

    # Create RGW user
    echo -e "${YELLOW}Creating RGW user...${NC}"
    radosgw-admin user create --uid=s3admin \
        --display-name="S3 Admin" \
        --access-key="$RGW_access_key" \
        --secret-key="$RGW_secret_key"

    # Configure RGW in dashboard
    echo -e "${YELLOW}Configuring RGW in dashboard...${NC}"
    ceph config-key set mgr/dashboard/RGW_API_ACCESS_KEY "$RGW_access_key"
    ceph config-key set mgr/dashboard/RGW_API_SECRET_KEY "$RGW_secret_key"
    ceph config-key set mgr/dashboard/RGW_API_SCHEME "https"
    ceph config-key set mgr/dashboard/RGW_API_HOSTS "$(IFS=, ; echo "${nodes[*]}")"
    ceph config-key set mgr/dashboard/RGW_API_PORT "7443"
    ceph config-key set mgr/dashboard/RGW_API_SSL_VERIFY "false"

    # Add RGW configuration to ceph.conf
    for node in "${nodes[@]}"; do
        cat <<EOF >> /etc/pve/ceph.conf
[client.rgw.$node]
    admin_socket = /var/run/ceph/ceph-client.rgw.\$(hostname).asok
    rgw_frontends = "beast ssl_endpoint=192.168.0.11:7443 ssl_certificate=/etc/ceph/certs/rgw.$node.crt ssl_private_key=/etc/ceph/certs/rgw.$node.key"
    host = "$node"
    keyring = /etc/pve/priv/ceph.client.rgw.$node.keyring
    log_file = /var/log/ceph/client.radosgw.\$host.log
    rgw_enable_apis = "s3"
    rgw_thread_pool_size = 256
    rgw_num_rados_handles = 4
    rgw_max_chunk_size = 262144
    rgw_cache_enabled = true
    rgw_cache_lru_size = 10000
EOF
    done

    # Distribute configuration to all nodes
    for node in "${nodes[@]}"; do
        scp /etc/pve/ceph.conf "$node:/etc/ceph/ceph.conf"
        ssh "$node" "chown ceph:ceph /etc/ceph/ceph.conf"
    done

    # Start RGW services
    for node in "${nodes[@]}"; do
        ssh "$node" "systemctl start ceph-radosgw@rgw.$node"
        ssh "$node" "systemctl enable ceph-radosgw@rgw.$node"
    done
}

# Main script execution
echo -e "${GREEN}Ceph Cluster Setup Script${NC}"

# Prompt for node names, cluster IPs, and public IPs
declare -A node_cluster_ips
declare -A node_public_ips
node_count=1

# Ensure at least 3 nodes are added
while true; do
    node=$(prompt "Enter node $node_count name (minimum 3 nodes required):")
    if [[ -z $node ]]; then
        echo -e "${RED}Node name cannot be empty. Please try again.${NC}"
        continue
    fi

    while true; do
        cluster_ip=$(prompt "Enter cluster IP address for $node")
        if validate_ip "$cluster_ip"; then
            node_cluster_ips["$node"]="$cluster_ip"
            break
        else
            echo -e "${RED}Invalid cluster IP address. Please try again.${NC}"
        fi
    done

    while true; do
        public_ip=$(prompt "Enter public IP address for $node")
        if validate_ip "$public_ip"; then
            node_public_ips["$node"]="$public_ip"
            break
        else
            echo -e "${RED}Invalid public IP address. Please try again.${NC}"
        fi
    done

    node_count=$((node_count + 1))

    # Allow adding more nodes after the first 3
    if [[ $node_count -ge 4 ]]; then
        add_more=$(prompt "Do you want to add another node? (yes/no)")
        if [[ $add_more != "yes" ]]; then
            break
        fi
    fi
done

# Check if at least 3 nodes were added
if [[ ${#node_cluster_ips[@]} -lt 3 ]]; then
    echo -e "${RED}Error: At least 3 nodes are required for a Ceph cluster. Exiting...${NC}"
    exit 1
fi

# Prompt for cluster and public networks
while true; do
    cluster_network=$(prompt "Enter cluster network (CIDR format, e.g., 10.10.10.0/24)")
    if validate_cidr "$cluster_network"; then
        break
    else
        echo -e "${RED}Invalid CIDR format. Please try again.${NC}"
    fi
done

while true; do
    public_network=$(prompt "Enter public network (CIDR format, e.g., 192.168.0.0/24 or fefa:bebe:cafe::/64)")
    if validate_cidr "$public_network"; then
        break
    else
        echo -e "${RED}Invalid CIDR format. Please try again.${NC}"
    fi
done

# Generate FSID
fsid=$(generate_fsid)
echo -e "${GREEN}Generated FSID: $fsid${NC}"

# Add Ceph repository and install packages
for node in "${!node_cluster_ips[@]}"; do
    echo -e "${YELLOW}Setting up $node...${NC}"
    add_ceph_repo "$node"
    install_ceph_packages "$node"
done

# Create and distribute admin keyring
create_admin_keyring "${!node_cluster_ips[@]}"

# Create and distribute bootstrap keyring
create_bootstrap_keyring "${!node_cluster_ips[@]}"

# Initialize the Ceph cluster
mon_hosts=$(IFS=" " ; echo "${node_cluster_ips[*]}")
initialize_ceph_cluster "$fsid" "$mon_hosts"

# Create OSDs
create_osds "${!node_cluster_ips[@]}"

# Configure RGW
configure_rgw "${!node_cluster_ips[@]}"

echo -e "${GREEN}Ceph cluster setup completed!${NC}"
