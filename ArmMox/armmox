#!/usr/bin/env bash

# Copyright (c) 2021-2024 Telxey
# Author: TELXEY (Rax)
# License: MIT
# https://raw.githubusercontent.com/Telxey/Proxmox/main/LICENSE

# Colors Codes
 default=`echo -en "\e[39m"`
 UL="\033[4m"
 BLIK="\033[5m"
 CLE="\033[m"
 BOLD="\033[1m"
 DIM="\e[2m"
 WHT="\033[97m"
 ORG="\033[38;5;208m"
 GRN="\033[1;92m"
 YLW="\033[38;5;184m"
 RED="\033[01;31m"
 BLK="\033[34m"
 DFLT="\033[39m"
 AQUA="\033[36m"
 BLD=$(echo "\033[1")
 LBL=$(echo "\033[38;5;33m")
 YW=$(echo "\033[33m")
 BL=$(echo "\033[36m")
 RD=$(echo "\033[01;31m")
 BGN=$(echo "\033[4;92m")
 GN=$(echo "\033[1;92m")
 DGN=$(echo "\033[32m")
 CL=$(echo "\033[m")
 CM="${GN}✓${CL}"
 CROSS="${RD}✗${CL}"
 BFR="\\r\\033[K"
 HOLD="-"

# This is solid prosgres bar funtion
progress-bar() {
  local duration=${1}


    already_done() { for ((done=0; done<elapsed; done++)); do printf "▇"; done }
    remaining() { for ((remain=elapsed; remain<duration; remain++)); do printf " "; done }
    percentage() { printf "| %s%%" $(( ((elapsed)*100)/(duration)*100/100 )); }
    clean_line() { printf "\r"; }

  for (( elapsed=1; elapsed<=duration; elapsed++ )); do
      already_done; remaining; percentage
      sleep 0.15
      clean_line
  done
  clean_line
}

# This function displays an informational message with a yellow color.
msg_info() {
  local msg="$1"
  echo -ne " ${HOLD} ${YW}${msg}..."
}
# This function displays a success message with a green color.
msg_ok() {
  local msg="$1"
  echo -e "${BFR} ${CM} ${GN}${msg}${CL}"
}
# This function displays an error message with a red color.
msg_error() {
  local msg="$1"
  echo -e "${BFR} ${CROSS} ${RD}${msg}${CL}"
}
# Run as root only
check_root() {
  if [[ "$(id -u)" -ne 0 || $(ps -o comm= -p $PPID) == "sudo" ]]; then
    clear
    msg_error "The script need to be run as root."
    echo -e "\nExiting..."
    sleep 2
    exit
  fi
}
if ! [ "$(id -u)" = 0 ]; then
   msg_error "The script need to be run as root." >&2   
   exit 1
fi

if [ "$SUDO_USER" ]; then
    export real_user=$SUDO_USER
else
    real_user=$(whoami)
fi

clear
echo -e "${RED}${BOLD}"
cat <<"EOF" 

           ██╗    ██╗ █████╗ ██████╗ ███╗   ██╗██╗ ██████╗
           ██║    ██║██╔══██╗██╔══██╗████╗  ██║██║██╔════╝
           ██║ █╗ ██║███████║██████╔╝██╔██╗ ██║██║██║  ███╗
           ██║███╗██║██╔══██║██╔══██╗██║╚██╗██║██║██║   ██║
           ╚███╔███╔╝██║  ██║██║  ██║██║ ╚████║██║╚██████╔╝
            ╚══╝╚══╝ ╚═╝  ╚═╝╚═╝  ╚═╝╚═╝  ╚═══╝╚═╝ ╚═════╝

EOF

echo -e "${CL}"
echo -e "${WHT}${BOLD}   ====================================================================${CL}"
echo -e "${LBL}       PLEASE DONT USE SUDO, USE SU TO LOGIN TO THE ROOT USER                 ${CL}"
echo -e "${LBL}    PLEASE STOP THIS SCRIPT NOW WITH CONTROL+C IF YOU ARE USING SUDO          ${CL}"
echo -e "${LBL}                  CONTINUING SETUP IN 5 SECONDS...                            ${CL}"
echo -e "${WHT}${BOLD}   ====================================================================${CL}"
OUTPUT=$(cat /etc/*release)
OS=$(cat /etc/*-release | grep -Po "(?<=^ID=).+" | sed 's/"//g')
NAME=$(cat /etc/*-release | grep -E "PRETTY_NAME" | cut -d = -f 2 | tr -d '"')
HS=$(hostname)
ARCH=$(uname -m)
LOCAL_IP=$(ifconfig | sed -En 's/127.0.0.1//;s/.*inet (addr:)?(([0-9]*\.){3}[0-9]*).*/\2/p')
EXT_IP=$(dig @resolver4.opendns.com myip.opendns.com +short)
if echo "$OUTPUT" | grep -q "Orange Pi" ; then
echo -e " ${GRN}${BOLD}   supported OS${CLE}${RED} $OS${ORG} $NAME ${LBL}$ARCH  ${GRN}${BOLD}Runimg ${CLE}"
echo -e "${CL}${WHT}Hostname${RED}: ${GRN}$HS ${WHT}Local IP${RED}:${GRN} $LOCAL_IP ${WHT} Eternal IP${RED}: ${GRN}$EXT_IP${CL}"
              export  SERVER_OS="Orange Pi"

else

                echo -e "${RED}Unable to detect supported OS...${CLE}"
                echo -e "${WHT}${BOLD}This Install is supported on ${ORG}${BOLD}Orange Pi ${WHT}${BOLD}Distro Only ...${CLE}"
                exit 1
fi

sleep 5
###
#
#
# Start collecting system OS
echo -e "${GRN}${BOLD}Collect some basic information on your system, you appear to be running:${CLE} "
echo -e "${ORG}"
echo -e "          --  OS Name                $(cat /etc/*-release | grep -Po "(?<=^ID=).+" | sed 's/"//g')"
echo -e "          --  Description            $(cat /etc/*-release | grep -E "PRETTY_NAME" | cut -d = -f 2 | tr -d '"')"
echo -e "          --  OS Version release     $(cat /etc/*-release | grep -E "VERSION_ID" | cut -d = -f 2 | tr -d '"')"
echo -e "          --  Code Name              $(cat /etc/*-release | grep -E "VERSION_CODENAME" | cut -d = -f 2 | tr -d '"')"
echo -e "${CLE}"
echo -e "${WHT}${BOLD}    --------------------------------------------------------------------${CL}"
echo -e "${YLW}"
cat <<"EOF"
                  Be patient with the installing setup, 
                 take a few minutes depending on PI model


EOF
msg_info "Cheking root"
sleep 3
check_root
msg_ok "Good root detected loading setup ..."
msg_info "check for updates"
rm -f /etc/apt/sources.list.d/docker.list
apt update &> /dev/null
sleep 3
msg_ok "DONE"
msg_info "Installing available upgrades"
apt upgrade -y &> /dev/null
msg_ok "upgrades Installed"
msg_info "Perform Full System Upgrade"
apt full-upgrade -y  &>  /dev/null
msg_ok "System Upgraded"
sleep 5
msg_info "instaling Basic Tools"
apt install -y duf btop curl nano gnupg ca-certificates wiringpi &> /dev/null
msg_ok "Basic Tools Installed"
msg_info "stoped and removed unused services and configurations"
systemctl stop docker &> /dev/null
sleep 3
systemctl disable docker &> /dev/null
for pkg in docker.io docker-doc docker-compose podman-docker containerd runc; do sudo apt-get remove $pkg; done &> /dev/null
apt autoclean -y &> /dev/null
apt autoremove -y &> /dev/null
msg_ok "system cleanup sucess"

msg_info "Remove autologin"
sed -i -e 's/--autologin orangepi//g' /usr/lib/systemd/system/getty@.service.d/override.conf
sudo systemctl daemon-reload &> /dev/null
msg_ok "autologin Stoped"

msg_info "Adding proxmox ARM64 and aarch64 repos"
curl -s https://mirrors.apqa.cn/proxmox/debian/pveport.gpg | tee /usr/share/keyrings/pveport.gpg &> /dev/null
echo "deb [deb=arm64 signed-by=/usr/share/keyrings/pveport.gpg] https://mirrors.apqa.cn/proxmox/debian/pve bookworm port" | tee  /etc/apt/sources.list.d/pveport.list &> /dev/null
sleep 3
msg_ok "DONE"
msg_info "Updating packages list"
apt update &> /dev/null
msg_ok "System updateted"
exit
orangepi-config
#sudo apt install ifupdown2 >/dev/null
#sudo apt install proxmox-ve postfix open-iscsi pve-edk2-firmware-aarch64
